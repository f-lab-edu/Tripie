@use '../../../../mixins/clear' as *;
@use '../../../../mixins/margins' as *;
@use '../../../../mixins/paddings' as *;
@use '../../../../mixins/justify-content' as *;
@use '../../../../mixins/align-items' as *;
@use '../../../../mixins/gap' as *;
@use '../../../../mixins/with-border' as *;
@use '../../../../variables/direction-map' as *;
@use '../../../../variables/gap-space-map' as *;
@use '../../../../variables/space-map' as *;
@use '../../../../variables/justify-content-values' as *;
@use '../../../../variables/align-items-values' as *;

.clear-btn {
  font: inherit;
  color: inherit;
  border: 0;
  outline: inherit;
  cursor: pointer;
  background-color: inherit;
}

.with-border {
  @include with-border();
}

.with-no-border {
  @include with-border('false');
}

@each $direction-key, $direction in $direction-map {
  @each $key, $value in $space-map {
    .margins_#{$key}_to_#{$direction-key} {
      @include margins($direction, $value);
    }
    .paddings_#{$key}_to_#{$direction-key} {
      @include paddings($direction, $value);
    }
  }
}

@each $value in $justify-content-values {
  .justify-content-#{$value} {
    @include justify-content($value);
  }
}

@each $value in $align-items-values {
  .align-items-#{$value} {
    @include align-items($value);
  }
}

@each $key, $value in $gap-space-map {
  .gap-#{$key} {
    @include gap($key, $value);
  }
}
