@use 'sass:map';
@use '../../../mixins' as *;
@use '../../../variables' as *;
@use '../../../functions/' as *;
@use '../../../base/' as *;

$stack-display-map: (inline-flex, grid);

@mixin display-stack($display) {
  display: $display;
}

@each $key in $stack-display-map {
  .stack-#{$key} {
    @include display-stack($key);
  }
}

$gap-direction-map: (column, row);

@mixin flex-direction($direction) {
  flex-direction: $direction;
}

@each $key in $gap-direction-map {
  .direction-#{$key} {
    @include flex-direction($key);
  }
}

$flex-wrap-map: (
  no-wrap: nowrap,
  wrap-reverse: wrap-reverse,
  wrap: wrap,
  wrap-xs: xs,
  wrap-sm: sm,
  wrap-md: md,
  wrap-lg: lg,
  wrap-xl: xl,
  wrap-xxl: xxl,
);

@mixin flex-wrap($wrap, $breakpoint: null) {
  @if ($wrap == nowrap or $wrap == wrap or $wrap == wrap-reverse) {
    flex-wrap: $wrap;
  } @else {
    @media (max-width: breakpoint($breakpoint)) {
      flex-wrap: wrap;
    }
  }
}

@each $key, $value in $flex-wrap-map {
  .flex-#{$key} {
    @include flex-wrap($value, $value);
  }
}

// grid style

$grid-template-map: (1, 2, 3, 4, 5, 6, 8, 10, 12);

@mixin grid-col-template($count) {
  grid-template-columns: repeat($count, 1fr);
}

@mixin grid-row-template($count) {
  grid-template-rows: repeat($count, 1fr);
}

@each $key in $grid-template-map {
  .grid-template-cols-#{$key} {
    @include grid-col-template($key);
  }
  .grid-template-rows-#{$key} {
    @include grid-row-template($key);
  }
  @if ($key%2==0) {
    .grid.stretch-grid-last-child {
      & > div:last-child {
        grid-column: 1 / -1;
      }
    }
  }
}

// wrap grid on min-width
$grid-wrap-map: (
  no-wrap: nowrap,
  wrap-xs: xs,
  wrap-sm: sm,
  wrap-md: md,
  wrap-lg: lg,
  wrap-xl: xl,
  wrap-xxl: xxl,
);

@mixin grid-break-max($breakpoint, $count) {
  @media (max-width: breakpoint($breakpoint)) {
    grid-template-columns: repeat($count, 1fr);
  }
}
@each $size in $grid-template-map {
  @each $break-key, $break-val in $grid-wrap-map {
    .grid-break-max-#{$break-key}-#{$size} {
      @include grid-break-max($break-val, $size);
    }
  }
}

@mixin grid-repeat($breakpoint, $count) {
  @media (min-width: breakpoint($breakpoint)) {
    grid-template-columns: repeat($count, 1fr);
  }
}

@each $size in $grid-template-map {
  @each $break-key, $break-val in $grid-wrap-map {
    .grid-repeat-#{$break-key}-#{$size} {
      @include grid-repeat($break-val, $size);
    }
  }
}
