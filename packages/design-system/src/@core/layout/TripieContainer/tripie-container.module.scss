@use '../../../mixins/margins' as *;
@use '../../../mixins/paddings' as *;
@use '../../../mixins/with-border' as *;
@use '../../../mixins/justify-content' as *;
@use '../../../mixins/align-items' as *;
@use '../../../mixins/align-text' as *;
@use '../../../mixins/with-border' as *;
@use '../../../mixins/gap' as *;
@use '../../../mixins/z-index' as *;
@use '../../../variables/z-index-map' as *;
@use '../../../variables/direction-map' as *;
@use '../../../variables/justify-content-values' as *;
@use '../../../variables/align-items-values' as *;
@use '../../../variables/align-text-values' as *;
@use '../../../variables/gap-space-map' as *;
@use '../../../variables/space-map' as *;

$container-display-map: (inline-flex, grid, inline-block);

@each $key in $container-display-map {
  .container-display-#{$key} {
    display: $key;
  }
}

.preserve-white-space {
  @media (max-width: 470px) {
    white-space: pre-wrap;
  }
}

.layout-fill-available {
  width: stretch; // spec has changed
  width: -moz-available;
  width: -webkit-fill-available;
}

@each $direction-key, $direction in $direction-map {
  @each $key, $value in $space-map {
    .margins_#{$key}_to_#{$direction-key} {
      @include margins($direction, $value);
    }
    .paddings_#{$key}_to_#{$direction-key} {
      @include paddings($direction, $value);
    }
  }
}

@each $value in $justify-content-values {
  .justify-content-#{$value} {
    @include justify-content($value);
  }
}

@each $value in $align-items-values {
  .align-items-#{$value} {
    @include align-items($value);
  }
}

@each $value in $align-text-values {
  .align-text-#{$value} {
    @include align-text($value);
  }
}

@each $key, $value in $gap-space-map {
  .gap-#{$key} {
    @include gap($key, $value);
  }
}

.with-border {
  @include with-border;
}
.with-no-border {
  @include with-border('false');
}

@each $key in $z-index-map {
  .z-index-#{$key} {
    @include z-index($key);
    @if ($key==absolute) {
      inset: 0;
    }
  }
}
