@use '../../../base/' as *;
@use '../../../variables' as *;
@use '../../../functions/' as *;
@use '../../../mixins/' as *;
@use '../../../generator/' as *;
@use '../../../mixins/index.scss' as *;
@use '../../../mixins/flex' as *;
@use '../../../mixins/accented' as *;
@use '../../../mixins/margins' as *;
@use '../../../mixins/paddings' as *;
@use '../../../mixins/justify-content' as *;
@use '../../../mixins/align-items' as *;
@use '../../../mixins/gap' as *;

@use 'sass:map';

.text {
  color: inherit;
  @include word-wrap;

  font-size: font-size(text);
  &[aria-selected='false'] {
    color: color(default, 500);
  }
  &[aria-selected='true'] {
    color: color(default, 900);
  }
}

.not-btn-text {
  margin-bottom: 0.35em; // mui typography
}

.accented {
  @include accented;
  font-size: inherit;
}

.bold {
  font-weight: font-weight(bold);
}

.cross {
  text-decoration: line-through;
  color: $theme-40;
}

.flex {
  @include flex;
  width: fit-content;
}

@each $direction-key, $direction in $direction-map {
  @each $key, $value in $space-map {
    .margins_#{$key}_to_#{$direction-key} {
      @include margins($direction, $value);
    }
  }
  @each $key, $value in $space-map {
    .paddings_#{$key}_to_#{$direction-key} {
      @include paddings($direction, $value);
    }
  }
}

@each $value in $justify-content-values {
  .justify-content-#{$value} {
    @include justify-content($value);
  }
}

$text-align-values: (center, start, end, justify, left, right);

@mixin align-text($orientation) {
  @if ($orientation!= none) {
    text-align: $orientation;
  }
}

@each $value in $align-items-values {
  .align-items-#{$value} {
    @include align-items($value);
  }
}

@each $value in $align-text-values {
  .align-text-#{$value} {
    @include align-text($value);
  }
}

@each $key, $value in $gap-space-map {
  .gap-#{$key} {
    @include gap($key, $value);
  }
}

@each $value in $break-point-values {
  .preserve-white-space-#{$value} {
    @include break-text($value);
  }
}

@mixin display-text($display) {
  display: $display;
}

$display-values: (inline, inline-block, block, contents);

@each $value in $display-values {
  .display-#{$value} {
    @include display-text($value);
  }
}

$font-size-map: (inherit, default, h0, h1, h2, h3, h4, small, tiny);

@each $value in $font-size-map {
  .font-size-#{$value} {
    @if ($value==inherit) {
      font-size: $value;
    } @else {
      font-size: font-size($value);
    }
  }
}
