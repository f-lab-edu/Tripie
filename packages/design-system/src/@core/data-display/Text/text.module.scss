@use '../../../base/' as *;
@use '../../../variables' as *;
@use '../../../functions/' as *;
@use '../../../mixins/' as *;
@use '../../../generator/' as *;
@use '../../../mixins/index.scss' as *;
@use '../../../mixins.scss' as *;

@use 'sass:map';

.text {
  color: inherit;
  @include word-wrap;
  font-size: font-size(text);
  &[aria-selected='false'] {
    color: color(default, 500);
  }
  &[aria-selected='true'] {
    color: color(default, 900);
  }
}

// .min {
//   min-width: 9rem;
// }

// .dim {
//   color: color(default, 500);
// }

// .primary {
//   color: color(primary, 900);
// }

// .secondary {
//   color: color(primary, 600);
// }

// .gray {
//   color: color(default, 800);
// }
// .danger {
//   color: color(danger, 600);
// }
// .warning {
//   color: color(warning, 300);
// }
// .emphasize {
//   color: color(primary, 700);
// }
// .box {
//   & > span {
//     position: relative;
//     display: inline-block;
//   }
// }

.accented {
  @include accented;
  font-size: inherit;
}

.small {
  font-size: 0.8rem;
}

.bold {
  font-weight: font-weight(bold);
}

.cross {
  text-decoration: line-through;
  color: $theme-40;
}

.flex {
  @include flex;
  // width: 100%;
  width: fit-content;
}

@each $key, $value in $space-map {
  .text.all.#{$key} {
    @include margins('all', $value);
  }
  .text.top-bottom.#{$key} {
    @include margins('top-bottom', $value);
  }
  .text.left-right.#{$key} {
    @include margins('left-right', $value);
  }
  .text.left.#{$key} {
    @include margins('left', $value);
  }
  .text.right.#{$key} {
    @include margins('right', $value);
  }
  .text.top.#{$key} {
    @include margins('top', $value);
  }
  .text.bottom.#{$key} {
    @include margins('bottom', $value);
  }
  .text.top-left-right.#{$key} {
    @include margins('top-left-right', $value);
  }
  .text.left-right-bottom.#{$key} {
    @include margins('left-right-bottom', $value);
  }
}
@each $value in $justify-content-values {
  .justify-content-#{$value} {
    @include justify-content($value);
  }
}

$text-align-values: (center, start, end, justify, left, right);

@mixin align-text($orientation) {
  @if ($orientation!= none) {
    text-align: $orientation;
  }
}

@each $value in $align-items-values {
  .align-items-#{$value} {
    @include align-items($value);
  }
}

@each $value in $align-text-values {
  .align-text-#{$value} {
    @include align-text($value);
  }
}

@each $key, $value in $gap-space-map {
  .gap-#{$key} {
    @include gap($key, $value);
  }
}

@each $value in $break-point-values {
  .preserve-white-space-#{$value} {
    @include break-text($value);
  }
}
