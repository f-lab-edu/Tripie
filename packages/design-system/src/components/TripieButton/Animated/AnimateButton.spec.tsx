import { render, screen } from '@testing-library/react';

import userEvent from '@testing-library/user-event';
import { describe, expect, it } from 'vitest';
import AnimatedButton from './AnimatedButton';

describe('AnimatedButton Component', () => {
  it('ÌÖçÏä§Ìä∏Í∞Ä ÌïòÎÇòÏùò ÌÖçÏä§Ìä∏ "button"Îßå ÏûàÎã§.', () => {
    render(<AnimatedButton>button</AnimatedButton>);

    const buttonElement = screen.getByRole('button', { name: /button/i });

    expect(buttonElement).toBeInTheDocument();
    expect(buttonElement).toHaveTextContent('button');
  });
  it('ÌÖçÏä§Ìä∏Í∞Ä ÎîîÌè¥Ìä∏ ÌÖçÏä§Ìä∏ "button"ÏôÄ "other child"Í∞Ä ÏûàÎã§.', () => {
    render(<AnimatedButton otherChild={'other child'}>button</AnimatedButton>);

    const buttonElement = screen.getByRole('button', { name: /button/i });

    expect(buttonElement).toBeInTheDocument();
    expect(buttonElement).toHaveTextContent('button');
    expect(buttonElement).toHaveTextContent('other child');
  });

  it('Î≤ÑÌäºÏóê ÎßàÏö∞Ïä§Î•º Ïò¨Î¶¨Î©¥ otherChildÏôÄ original textÍ∞Ä translateY(2rem)Î°ú Ïù¥ÎèôÌïúÎã§.', async () => {
    render(<AnimatedButton otherChild="other child">original text</AnimatedButton>);

    const buttonElement = screen.getByRole('button');

    // Î≤ÑÌäº Ìò∏Î≤Ñ Ïãú
    await userEvent.hover(buttonElement);

    const hoveredOriginalText = screen.getByText(/original text/i);
    const hoveredChildText = screen.getByText(/original text/i);

    expect(getComputedStyle(hoveredOriginalText).transform).toContain('translateY(2rem)');
    expect(getComputedStyle(hoveredChildText).transform).toContain('translateY(2rem)');
  });

  it('disabled={true} ÏÑ§Ï†ï Ïãú ÎπÑÌôúÏÑ±ÌôîÎêúÎã§.', () => {
    render(<AnimatedButton disabled={true}>button</AnimatedButton>);

    const buttonElement = screen.getByRole('button', { name: /button/i });

    expect(buttonElement).toBeInTheDocument();
    expect(buttonElement).toBeDisabled();
  });
  it('withBorder={true} ÏÑ§Ï†ï Ïãú Î≤ÑÌäº ÌÖåÎëêÎ¶¨ Ïä§ÌÉÄÏùºÏù¥ Ï†ÅÏö©ÎêòÏñ¥scss moduleÏù¥ÎØÄÎ°ú classNameÏóê `with-border`Í∞Ä Ìè¨Ìï®ÎêúÎã§.', () => {
    render(<AnimatedButton withBorder={true}>button</AnimatedButton>);

    const buttonElement = screen.getByRole('button', { name: /button/i });

    expect(buttonElement).toBeInTheDocument();
    expect(buttonElement.className).toMatch(/with-border/);
  });

  // ! ü§î Î≤ÑÌäº Í∏∏Ïù¥Î•º Ï†úÌïúÌï¥ÏïºÌï†ÎìØ, ÌÖçÏä§Ìä∏Í∞Ä ÎÑàÎ¨¥ ÎßéÏúºÎ©¥ Í∞ÄÎèÖÏÑ±ÎèÑ ÏïàÏ¢ãÏïÑÏßÄÍ≥† Ïï†ÎãàÎ©îÏù¥ÏÖòÎèÑ Íπ®ÏßÑÎã§. Ïñ¥ÎñªÍ≤å Ï†úÌïúÌï†Íπå?
  //   it('Î≤ÑÌäºÏù¥ Í∏¥ ÌÖçÏä§Ìä∏Î•º Ìè¨Ìï®ÌïòÍ≥†, ÏûòÎ¶¨ÏßÄ ÏïäÍ≥†, ÌÅ¨Í∏∞Í∞Ä Ï°∞Ï†ïÎêúÎã§.', () => {
  //     const longText = 'Super long button text. max max max'.repeat(3); // 105Ïûê

  //     render(<AnimatedButton>{longText}</AnimatedButton>);

  //     const button = screen.getByRole('button');

  //     // ‚úÖ Ensure button contains full text
  //     expect(button).toHaveTextContent(longText);

  //     // ‚úÖ Ensure button width expands (adjust 200px based on your design)
  //     // expect(button.scrollWidth).toBeGreaterThan(200);

  //     // ‚úÖ Ensure text is not truncated (checks if scrollWidth > clientWidth)
  //     // expect(button.scrollWidth).toBeGreaterThan(button.clientWidth);

  //     expect(getComputedStyle(button).width).not.toBe('0px');

  //     console.log(button.scrollWidth);

  //     expect(button.textContent?.length).toBeGreaterThan(10);

  //     // ‚úÖ Optional: Ensure button text is under a reasonable limit (e.g., 30 chars)
  //     expect(longText.length).toBeLessThanOrEqual(105);
  //   });
});
